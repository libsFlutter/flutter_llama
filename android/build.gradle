group = "com.example.flutter_llama"
version = "1.0-SNAPSHOT"

buildscript {
    ext.kotlin_version = "2.1.0"
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath("com.android.tools.build:gradle:8.9.1")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version")
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"

android {
    namespace = "net.nativemind.flutter_llama"

    compileSdk = 36

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11
    }

    sourceSets {
        main.java.srcDirs += "src/main/kotlin"
        test.java.srcDirs += "src/test/kotlin"
    }

    defaultConfig {
        minSdk = 24
        
        // NDK configuration
        ndk {
            // Specify ABIs to build (arm64 only for modern devices)
            abiFilters 'arm64-v8a'
        }
        
        // CMake configuration
        externalNativeBuild {
            cmake {
                cppFlags '-std=c++17 -fexceptions -frtti -O3'
                arguments '-DANDROID_STL=c++_shared',
                          '-DANDROID_PLATFORM=android-24',
                          '-DCMAKE_BUILD_TYPE=Release'
            }
        }
    }
    
    // External native build configuration
    externalNativeBuild {
        cmake {
            path = file('src/main/cpp/CMakeLists.txt')
            version = '3.18.1'
        }
    }
    
    // Build types
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            jniDebuggable true
        }
    }

    dependencies {
        testImplementation("org.jetbrains.kotlin:kotlin-test")
        testImplementation("org.mockito:mockito-core:5.0.0")
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()

            testLogging {
               events "passed", "skipped", "failed", "standardOut", "standardError"
               outputs.upToDateWhen {false}
               showStandardStreams = true
            }
        }
    }
}
