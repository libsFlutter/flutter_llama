import 'model_source.dart';

/// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
class PresetModel {
  final String id;
  final String name;
  final String description;
  final ModelSource source;
  final String? variant; // –î–ª—è Ollama (q2_k, q4_k_s –∏ —Ç.–¥.)
  final List<String> files;
  final List<String> languages;
  final String size;
  final int? contextSize;
  final Map<String, dynamic>? metadata;
  
  const PresetModel({
    required this.id,
    required this.name,
    required this.description,
    required this.source,
    this.variant,
    this.files = const [],
    this.languages = const [],
    required this.size,
    this.contextSize,
    this.metadata,
  });
  
  /// –ü–æ–ª–Ω–æ–µ –∏–º—è –º–æ–¥–µ–ª–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–æ–º
  String get fullName {
    if (variant != null) {
      return '$id:$variant';
    }
    return id;
  }
  
  /// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
  PresetModel copyWith({
    String? id,
    String? name,
    String? description,
    ModelSource? source,
    String? variant,
    List<String>? files,
    List<String>? languages,
    String? size,
    int? contextSize,
    Map<String, dynamic>? metadata,
  }) {
    return PresetModel(
      id: id ?? this.id,
      name: name ?? this.name,
      description: description ?? this.description,
      source: source ?? this.source,
      variant: variant ?? this.variant,
      files: files ?? this.files,
      languages: languages ?? this.languages,
      size: size ?? this.size,
      contextSize: contextSize ?? this.contextSize,
      metadata: metadata ?? this.metadata,
    );
  }
  
  @override
  String toString() {
    return 'PresetModel($fullName, source: ${source.displayName}, size: $size)';
  }
}

/// –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
class PresetModels {
  // HuggingFace –º–æ–¥–µ–ª–∏
  static const shridharMultimodal = PresetModel(
    id: 'nativemind/shridhar_8k_multimodal',
    name: 'Shridhar 8K Multimodal',
    description: '–ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∞—è –¥—É—Ö–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π 4 —è–∑—ã–∫–æ–≤',
    source: ModelSource.huggingFace,
    files: [
      'adapter_model.safetensors',
      'adapter_config.json',
    ],
    languages: ['üá∑üá∫ –†—É—Å—Å–∫–∏–π', 'üá™üá∏ –ò—Å–ø–∞–Ω—Å–∫–∏–π', 'üáÆüá≥ –•–∏–Ω–¥–∏', 'üáπüá≠ –¢–∞–π—Å–∫–∏–π'],
    size: '~50 MB',
    contextSize: 8192,
  );
  
  // Ollama –º–æ–¥–µ–ª–∏ - Braindler
  static const braindlerQ2K = PresetModel(
    id: 'nativemind/braindler',
    name: 'Braindler Q2_K',
    description: '–°–∞–º–∞—è –±—ã—Å—Ç—Ä–∞—è –≤–µ—Ä—Å–∏—è, –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤',
    source: ModelSource.ollama,
    variant: 'q2_k',
    files: [],
    languages: ['üá¨üáß English'],
    size: '72 MB',
    contextSize: 2048,
    metadata: {
      'recommended': false,
      'speed': 'fastest',
    },
  );
  
  static const braindlerQ4K = PresetModel(
    id: 'nativemind/braindler',
    name: 'Braindler Q4_K',
    description: '‚≠ê –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è - –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞',
    source: ModelSource.ollama,
    variant: 'q4_k_s',
    files: [],
    languages: ['üá¨üáß English'],
    size: '88 MB',
    contextSize: 2048,
    metadata: {
      'recommended': true,
      'speed': 'fast',
    },
  );
  
  static const braindlerQ5K = PresetModel(
    id: 'nativemind/braindler',
    name: 'Braindler Q5_K',
    description: '–ü–æ–≤—ã—à–µ–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –Ω–µ–º–Ω–æ–≥–æ –º–µ–¥–ª–µ–Ω–Ω–µ–µ',
    source: ModelSource.ollama,
    variant: 'q5_k_m',
    files: [],
    languages: ['üá¨üáß English'],
    size: '103 MB',
    contextSize: 2048,
    metadata: {
      'recommended': false,
      'speed': 'medium',
    },
  );
  
  static const braindlerQ8 = PresetModel(
    id: 'nativemind/braindler',
    name: 'Braindler Q8',
    description: '–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è –º–æ—â–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤',
    source: ModelSource.ollama,
    variant: 'q8_0',
    files: [],
    languages: ['üá¨üáß English'],
    size: '140 MB',
    contextSize: 2048,
    metadata: {
      'recommended': false,
      'speed': 'slow',
    },
  );
  
  static const braindlerF16 = PresetModel(
    id: 'nativemind/braindler',
    name: 'Braindler F16',
    description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, —Ç—Ä–µ–±—É–µ—Ç –º–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–æ–≤',
    source: ModelSource.ollama,
    variant: 'f16',
    files: [],
    languages: ['üá¨üáß English'],
    size: '256 MB',
    contextSize: 2048,
    metadata: {
      'recommended': false,
      'speed': 'very_slow',
    },
  );
  
  /// –í—Å–µ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
  static const List<PresetModel> all = [
    shridharMultimodal,
    braindlerQ2K,
    braindlerQ4K,
    braindlerQ5K,
    braindlerQ8,
    braindlerF16,
  ];
  
  /// –ü–æ–ª—É—á–∏—Ç—å –º–æ–¥–µ–ª–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É
  static List<PresetModel> bySource(ModelSource source) {
    return all.where((model) => model.source == source).toList();
  }
  
  /// –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –º–æ–¥–µ–ª–∏
  static List<PresetModel> get recommended {
    return all.where((model) {
      final isRecommended = model.metadata?['recommended'] as bool?;
      return isRecommended == true;
    }).toList();
  }
  
  /// –ù–∞–π—Ç–∏ –º–æ–¥–µ–ª—å –ø–æ ID
  static PresetModel? findById(String id, {String? variant}) {
    return all.firstWhere(
      (model) {
        if (variant != null) {
          return model.id == id && model.variant == variant;
        }
        return model.id == id;
      },
      orElse: () => all.first, // fallback
    );
  }
}


